// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Comments", testComments)
	t.Run("Ingredients", testIngredients)
	t.Run("Recipes", testRecipes)
	t.Run("Tags", testTags)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Comments", testCommentsDelete)
	t.Run("Ingredients", testIngredientsDelete)
	t.Run("Recipes", testRecipesDelete)
	t.Run("Tags", testTagsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Ingredients", testIngredientsQueryDeleteAll)
	t.Run("Recipes", testRecipesQueryDeleteAll)
	t.Run("Tags", testTagsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Ingredients", testIngredientsSliceDeleteAll)
	t.Run("Recipes", testRecipesSliceDeleteAll)
	t.Run("Tags", testTagsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Comments", testCommentsExists)
	t.Run("Ingredients", testIngredientsExists)
	t.Run("Recipes", testRecipesExists)
	t.Run("Tags", testTagsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Comments", testCommentsFind)
	t.Run("Ingredients", testIngredientsFind)
	t.Run("Recipes", testRecipesFind)
	t.Run("Tags", testTagsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Comments", testCommentsBind)
	t.Run("Ingredients", testIngredientsBind)
	t.Run("Recipes", testRecipesBind)
	t.Run("Tags", testTagsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Comments", testCommentsOne)
	t.Run("Ingredients", testIngredientsOne)
	t.Run("Recipes", testRecipesOne)
	t.Run("Tags", testTagsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Comments", testCommentsAll)
	t.Run("Ingredients", testIngredientsAll)
	t.Run("Recipes", testRecipesAll)
	t.Run("Tags", testTagsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Comments", testCommentsCount)
	t.Run("Ingredients", testIngredientsCount)
	t.Run("Recipes", testRecipesCount)
	t.Run("Tags", testTagsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Comments", testCommentsHooks)
	t.Run("Ingredients", testIngredientsHooks)
	t.Run("Recipes", testRecipesHooks)
	t.Run("Tags", testTagsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Ingredients", testIngredientsInsert)
	t.Run("Ingredients", testIngredientsInsertWhitelist)
	t.Run("Recipes", testRecipesInsert)
	t.Run("Recipes", testRecipesInsertWhitelist)
	t.Run("Tags", testTagsInsert)
	t.Run("Tags", testTagsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CommentToRecipeUsingRecipeidRecipe", testCommentToOneRecipeUsingRecipeidRecipe)
	t.Run("IngredientToRecipeUsingRecipeidRecipe", testIngredientToOneRecipeUsingRecipeidRecipe)
	t.Run("TagToRecipeUsingRecipeidRecipe", testTagToOneRecipeUsingRecipeidRecipe)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("RecipeToRecipeidComments", testRecipeToManyRecipeidComments)
	t.Run("RecipeToRecipeidIngredients", testRecipeToManyRecipeidIngredients)
	t.Run("RecipeToRecipeidTags", testRecipeToManyRecipeidTags)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CommentToRecipeUsingRecipeidComments", testCommentToOneSetOpRecipeUsingRecipeidRecipe)
	t.Run("IngredientToRecipeUsingRecipeidIngredients", testIngredientToOneSetOpRecipeUsingRecipeidRecipe)
	t.Run("TagToRecipeUsingRecipeidTags", testTagToOneSetOpRecipeUsingRecipeidRecipe)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CommentToRecipeUsingRecipeidComments", testCommentToOneRemoveOpRecipeUsingRecipeidRecipe)
	t.Run("IngredientToRecipeUsingRecipeidIngredients", testIngredientToOneRemoveOpRecipeUsingRecipeidRecipe)
	t.Run("TagToRecipeUsingRecipeidTags", testTagToOneRemoveOpRecipeUsingRecipeidRecipe)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("RecipeToRecipeidComments", testRecipeToManyAddOpRecipeidComments)
	t.Run("RecipeToRecipeidIngredients", testRecipeToManyAddOpRecipeidIngredients)
	t.Run("RecipeToRecipeidTags", testRecipeToManyAddOpRecipeidTags)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("RecipeToRecipeidComments", testRecipeToManySetOpRecipeidComments)
	t.Run("RecipeToRecipeidIngredients", testRecipeToManySetOpRecipeidIngredients)
	t.Run("RecipeToRecipeidTags", testRecipeToManySetOpRecipeidTags)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("RecipeToRecipeidComments", testRecipeToManyRemoveOpRecipeidComments)
	t.Run("RecipeToRecipeidIngredients", testRecipeToManyRemoveOpRecipeidIngredients)
	t.Run("RecipeToRecipeidTags", testRecipeToManyRemoveOpRecipeidTags)
}

func TestReload(t *testing.T) {
	t.Run("Comments", testCommentsReload)
	t.Run("Ingredients", testIngredientsReload)
	t.Run("Recipes", testRecipesReload)
	t.Run("Tags", testTagsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Ingredients", testIngredientsReloadAll)
	t.Run("Recipes", testRecipesReloadAll)
	t.Run("Tags", testTagsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Comments", testCommentsSelect)
	t.Run("Ingredients", testIngredientsSelect)
	t.Run("Recipes", testRecipesSelect)
	t.Run("Tags", testTagsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Comments", testCommentsUpdate)
	t.Run("Ingredients", testIngredientsUpdate)
	t.Run("Recipes", testRecipesUpdate)
	t.Run("Tags", testTagsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Ingredients", testIngredientsSliceUpdateAll)
	t.Run("Recipes", testRecipesSliceUpdateAll)
	t.Run("Tags", testTagsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
