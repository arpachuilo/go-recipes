// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recipe is an object representing the database table.
type Recipe struct {
	ID           null.Int64  `boil:"id" json:"id,omitempty" toml:"id" yaml:"id,omitempty"`
	URL          null.String `boil:"url" json:"url,omitempty" toml:"url" yaml:"url,omitempty"`
	Title        null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	Instructions null.String `boil:"instructions" json:"instructions,omitempty" toml:"instructions" yaml:"instructions,omitempty"`
	Author       null.String `boil:"author" json:"author,omitempty" toml:"author" yaml:"author,omitempty"`
	TotalTime    null.Int64  `boil:"total_time" json:"total_time,omitempty" toml:"total_time" yaml:"total_time,omitempty"`
	Yields       null.String `boil:"yields" json:"yields,omitempty" toml:"yields" yaml:"yields,omitempty"`
	ServingSize  null.String `boil:"serving_size" json:"serving_size,omitempty" toml:"serving_size" yaml:"serving_size,omitempty"`
	Calories     null.String `boil:"calories" json:"calories,omitempty" toml:"calories" yaml:"calories,omitempty"`
	Image        null.Bytes  `boil:"image" json:"image,omitempty" toml:"image" yaml:"image,omitempty"`
	Path         null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`

	R *recipeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeColumns = struct {
	ID           string
	URL          string
	Title        string
	Instructions string
	Author       string
	TotalTime    string
	Yields       string
	ServingSize  string
	Calories     string
	Image        string
	Path         string
}{
	ID:           "id",
	URL:          "url",
	Title:        "title",
	Instructions: "instructions",
	Author:       "author",
	TotalTime:    "total_time",
	Yields:       "yields",
	ServingSize:  "serving_size",
	Calories:     "calories",
	Image:        "image",
	Path:         "path",
}

var RecipeTableColumns = struct {
	ID           string
	URL          string
	Title        string
	Instructions string
	Author       string
	TotalTime    string
	Yields       string
	ServingSize  string
	Calories     string
	Image        string
	Path         string
}{
	ID:           "recipes.id",
	URL:          "recipes.url",
	Title:        "recipes.title",
	Instructions: "recipes.instructions",
	Author:       "recipes.author",
	TotalTime:    "recipes.total_time",
	Yields:       "recipes.yields",
	ServingSize:  "recipes.serving_size",
	Calories:     "recipes.calories",
	Image:        "recipes.image",
	Path:         "recipes.path",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var RecipeWhere = struct {
	ID           whereHelpernull_Int64
	URL          whereHelpernull_String
	Title        whereHelpernull_String
	Instructions whereHelpernull_String
	Author       whereHelpernull_String
	TotalTime    whereHelpernull_Int64
	Yields       whereHelpernull_String
	ServingSize  whereHelpernull_String
	Calories     whereHelpernull_String
	Image        whereHelpernull_Bytes
	Path         whereHelpernull_String
}{
	ID:           whereHelpernull_Int64{field: "\"recipes\".\"id\""},
	URL:          whereHelpernull_String{field: "\"recipes\".\"url\""},
	Title:        whereHelpernull_String{field: "\"recipes\".\"title\""},
	Instructions: whereHelpernull_String{field: "\"recipes\".\"instructions\""},
	Author:       whereHelpernull_String{field: "\"recipes\".\"author\""},
	TotalTime:    whereHelpernull_Int64{field: "\"recipes\".\"total_time\""},
	Yields:       whereHelpernull_String{field: "\"recipes\".\"yields\""},
	ServingSize:  whereHelpernull_String{field: "\"recipes\".\"serving_size\""},
	Calories:     whereHelpernull_String{field: "\"recipes\".\"calories\""},
	Image:        whereHelpernull_Bytes{field: "\"recipes\".\"image\""},
	Path:         whereHelpernull_String{field: "\"recipes\".\"path\""},
}

// RecipeRels is where relationship names are stored.
var RecipeRels = struct {
	RecipeidComments    string
	RecipeidIngredients string
	RecipeidTags        string
}{
	RecipeidComments:    "RecipeidComments",
	RecipeidIngredients: "RecipeidIngredients",
	RecipeidTags:        "RecipeidTags",
}

// recipeR is where relationships are stored.
type recipeR struct {
	RecipeidComments    CommentSlice    `boil:"RecipeidComments" json:"RecipeidComments" toml:"RecipeidComments" yaml:"RecipeidComments"`
	RecipeidIngredients IngredientSlice `boil:"RecipeidIngredients" json:"RecipeidIngredients" toml:"RecipeidIngredients" yaml:"RecipeidIngredients"`
	RecipeidTags        TagSlice        `boil:"RecipeidTags" json:"RecipeidTags" toml:"RecipeidTags" yaml:"RecipeidTags"`
}

// NewStruct creates a new relationship struct
func (*recipeR) NewStruct() *recipeR {
	return &recipeR{}
}

func (r *recipeR) GetRecipeidComments() CommentSlice {
	if r == nil {
		return nil
	}
	return r.RecipeidComments
}

func (r *recipeR) GetRecipeidIngredients() IngredientSlice {
	if r == nil {
		return nil
	}
	return r.RecipeidIngredients
}

func (r *recipeR) GetRecipeidTags() TagSlice {
	if r == nil {
		return nil
	}
	return r.RecipeidTags
}

// recipeL is where Load methods for each relationship are stored.
type recipeL struct{}

var (
	recipeAllColumns            = []string{"id", "url", "title", "instructions", "author", "total_time", "yields", "serving_size", "calories", "image", "path"}
	recipeColumnsWithoutDefault = []string{}
	recipeColumnsWithDefault    = []string{"id", "url", "title", "instructions", "author", "total_time", "yields", "serving_size", "calories", "image", "path"}
	recipePrimaryKeyColumns     = []string{"id"}
	recipeGeneratedColumns      = []string{"id"}
)

type (
	// RecipeSlice is an alias for a slice of pointers to Recipe.
	// This should almost always be used instead of []Recipe.
	RecipeSlice []*Recipe
	// RecipeHook is the signature for custom Recipe hook methods
	RecipeHook func(context.Context, boil.ContextExecutor, *Recipe) error

	recipeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeType                 = reflect.TypeOf(&Recipe{})
	recipeMapping              = queries.MakeStructMapping(recipeType)
	recipePrimaryKeyMapping, _ = queries.BindMapping(recipeType, recipeMapping, recipePrimaryKeyColumns)
	recipeInsertCacheMut       sync.RWMutex
	recipeInsertCache          = make(map[string]insertCache)
	recipeUpdateCacheMut       sync.RWMutex
	recipeUpdateCache          = make(map[string]updateCache)
	recipeUpsertCacheMut       sync.RWMutex
	recipeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeAfterSelectHooks []RecipeHook

var recipeBeforeInsertHooks []RecipeHook
var recipeAfterInsertHooks []RecipeHook

var recipeBeforeUpdateHooks []RecipeHook
var recipeAfterUpdateHooks []RecipeHook

var recipeBeforeDeleteHooks []RecipeHook
var recipeAfterDeleteHooks []RecipeHook

var recipeBeforeUpsertHooks []RecipeHook
var recipeAfterUpsertHooks []RecipeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recipe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recipe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recipe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recipe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recipe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recipe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recipe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recipe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recipe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeHook registers your hook function for all future operations.
func AddRecipeHook(hookPoint boil.HookPoint, recipeHook RecipeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		recipeAfterSelectHooks = append(recipeAfterSelectHooks, recipeHook)
	case boil.BeforeInsertHook:
		recipeBeforeInsertHooks = append(recipeBeforeInsertHooks, recipeHook)
	case boil.AfterInsertHook:
		recipeAfterInsertHooks = append(recipeAfterInsertHooks, recipeHook)
	case boil.BeforeUpdateHook:
		recipeBeforeUpdateHooks = append(recipeBeforeUpdateHooks, recipeHook)
	case boil.AfterUpdateHook:
		recipeAfterUpdateHooks = append(recipeAfterUpdateHooks, recipeHook)
	case boil.BeforeDeleteHook:
		recipeBeforeDeleteHooks = append(recipeBeforeDeleteHooks, recipeHook)
	case boil.AfterDeleteHook:
		recipeAfterDeleteHooks = append(recipeAfterDeleteHooks, recipeHook)
	case boil.BeforeUpsertHook:
		recipeBeforeUpsertHooks = append(recipeBeforeUpsertHooks, recipeHook)
	case boil.AfterUpsertHook:
		recipeAfterUpsertHooks = append(recipeAfterUpsertHooks, recipeHook)
	}
}

// One returns a single recipe record from the query.
func (q recipeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recipe, error) {
	o := &Recipe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recipe records from the query.
func (q recipeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSlice, error) {
	var o []*Recipe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Recipe slice")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recipe records in the query.
func (q recipeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipes exists")
	}

	return count > 0, nil
}

// RecipeidComments retrieves all the comment's Comments with an executor via recipeid column.
func (o *Recipe) RecipeidComments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"comments\".\"recipeid\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// RecipeidIngredients retrieves all the ingredient's Ingredients with an executor via recipeid column.
func (o *Recipe) RecipeidIngredients(mods ...qm.QueryMod) ingredientQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ingredients\".\"recipeid\"=?", o.ID),
	)

	return Ingredients(queryMods...)
}

// RecipeidTags retrieves all the tag's Tags with an executor via recipeid column.
func (o *Recipe) RecipeidTags(mods ...qm.QueryMod) tagQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tags\".\"recipeid\"=?", o.ID),
	)

	return Tags(queryMods...)
}

// LoadRecipeidComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadRecipeidComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`comments`),
		qm.WhereIn(`comments.recipeid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comments")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on comments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for comments")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeidComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.RecipeidRecipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Recipeid) {
				local.R.RecipeidComments = append(local.R.RecipeidComments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.RecipeidRecipe = local
				break
			}
		}
	}

	return nil
}

// LoadRecipeidIngredients allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadRecipeidIngredients(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ingredients`),
		qm.WhereIn(`ingredients.recipeid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ingredients")
	}

	var resultSlice []*Ingredient
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ingredients")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ingredients")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ingredients")
	}

	if len(ingredientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeidIngredients = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ingredientR{}
			}
			foreign.R.RecipeidRecipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Recipeid) {
				local.R.RecipeidIngredients = append(local.R.RecipeidIngredients, foreign)
				if foreign.R == nil {
					foreign.R = &ingredientR{}
				}
				foreign.R.RecipeidRecipe = local
				break
			}
		}
	}

	return nil
}

// LoadRecipeidTags allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeL) LoadRecipeidTags(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`tags`),
		qm.WhereIn(`tags.recipeid in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tags")
	}

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tags")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tags")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tags")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeidTags = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tagR{}
			}
			foreign.R.RecipeidRecipe = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Recipeid) {
				local.R.RecipeidTags = append(local.R.RecipeidTags, foreign)
				if foreign.R == nil {
					foreign.R = &tagR{}
				}
				foreign.R.RecipeidRecipe = local
				break
			}
		}
	}

	return nil
}

// AddRecipeidComments adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.RecipeidComments.
// Sets related.R.RecipeidRecipe appropriately.
func (o *Recipe) AddRecipeidComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Recipeid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"recipeid"}),
				strmangle.WhereClause("\"", "\"", 0, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Recipeid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			RecipeidComments: related,
		}
	} else {
		o.R.RecipeidComments = append(o.R.RecipeidComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				RecipeidRecipe: o,
			}
		} else {
			rel.R.RecipeidRecipe = o
		}
	}
	return nil
}

// SetRecipeidComments removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RecipeidRecipe's RecipeidComments accordingly.
// Replaces o.R.RecipeidComments with related.
// Sets related.R.RecipeidRecipe's RecipeidComments accordingly.
func (o *Recipe) SetRecipeidComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	query := "update \"comments\" set \"recipeid\" = null where \"recipeid\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RecipeidComments {
			queries.SetScanner(&rel.Recipeid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RecipeidRecipe = nil
		}
		o.R.RecipeidComments = nil
	}

	return o.AddRecipeidComments(ctx, exec, insert, related...)
}

// RemoveRecipeidComments relationships from objects passed in.
// Removes related items from R.RecipeidComments (uses pointer comparison, removal does not keep order)
// Sets related.R.RecipeidRecipe.
func (o *Recipe) RemoveRecipeidComments(ctx context.Context, exec boil.ContextExecutor, related ...*Comment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Recipeid, nil)
		if rel.R != nil {
			rel.R.RecipeidRecipe = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("recipeid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RecipeidComments {
			if rel != ri {
				continue
			}

			ln := len(o.R.RecipeidComments)
			if ln > 1 && i < ln-1 {
				o.R.RecipeidComments[i] = o.R.RecipeidComments[ln-1]
			}
			o.R.RecipeidComments = o.R.RecipeidComments[:ln-1]
			break
		}
	}

	return nil
}

// AddRecipeidIngredients adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.RecipeidIngredients.
// Sets related.R.RecipeidRecipe appropriately.
func (o *Recipe) AddRecipeidIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ingredient) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Recipeid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ingredients\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"recipeid"}),
				strmangle.WhereClause("\"", "\"", 0, ingredientPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Recipeid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			RecipeidIngredients: related,
		}
	} else {
		o.R.RecipeidIngredients = append(o.R.RecipeidIngredients, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ingredientR{
				RecipeidRecipe: o,
			}
		} else {
			rel.R.RecipeidRecipe = o
		}
	}
	return nil
}

// SetRecipeidIngredients removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RecipeidRecipe's RecipeidIngredients accordingly.
// Replaces o.R.RecipeidIngredients with related.
// Sets related.R.RecipeidRecipe's RecipeidIngredients accordingly.
func (o *Recipe) SetRecipeidIngredients(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ingredient) error {
	query := "update \"ingredients\" set \"recipeid\" = null where \"recipeid\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RecipeidIngredients {
			queries.SetScanner(&rel.Recipeid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RecipeidRecipe = nil
		}
		o.R.RecipeidIngredients = nil
	}

	return o.AddRecipeidIngredients(ctx, exec, insert, related...)
}

// RemoveRecipeidIngredients relationships from objects passed in.
// Removes related items from R.RecipeidIngredients (uses pointer comparison, removal does not keep order)
// Sets related.R.RecipeidRecipe.
func (o *Recipe) RemoveRecipeidIngredients(ctx context.Context, exec boil.ContextExecutor, related ...*Ingredient) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Recipeid, nil)
		if rel.R != nil {
			rel.R.RecipeidRecipe = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("recipeid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RecipeidIngredients {
			if rel != ri {
				continue
			}

			ln := len(o.R.RecipeidIngredients)
			if ln > 1 && i < ln-1 {
				o.R.RecipeidIngredients[i] = o.R.RecipeidIngredients[ln-1]
			}
			o.R.RecipeidIngredients = o.R.RecipeidIngredients[:ln-1]
			break
		}
	}

	return nil
}

// AddRecipeidTags adds the given related objects to the existing relationships
// of the recipe, optionally inserting them as new records.
// Appends related to o.R.RecipeidTags.
// Sets related.R.RecipeidRecipe appropriately.
func (o *Recipe) AddRecipeidTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Recipeid, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tags\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"recipeid"}),
				strmangle.WhereClause("\"", "\"", 0, tagPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Recipeid, o.ID)
		}
	}

	if o.R == nil {
		o.R = &recipeR{
			RecipeidTags: related,
		}
	} else {
		o.R.RecipeidTags = append(o.R.RecipeidTags, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagR{
				RecipeidRecipe: o,
			}
		} else {
			rel.R.RecipeidRecipe = o
		}
	}
	return nil
}

// SetRecipeidTags removes all previously related items of the
// recipe replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.RecipeidRecipe's RecipeidTags accordingly.
// Replaces o.R.RecipeidTags with related.
// Sets related.R.RecipeidRecipe's RecipeidTags accordingly.
func (o *Recipe) SetRecipeidTags(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Tag) error {
	query := "update \"tags\" set \"recipeid\" = null where \"recipeid\" = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RecipeidTags {
			queries.SetScanner(&rel.Recipeid, nil)
			if rel.R == nil {
				continue
			}

			rel.R.RecipeidRecipe = nil
		}
		o.R.RecipeidTags = nil
	}

	return o.AddRecipeidTags(ctx, exec, insert, related...)
}

// RemoveRecipeidTags relationships from objects passed in.
// Removes related items from R.RecipeidTags (uses pointer comparison, removal does not keep order)
// Sets related.R.RecipeidRecipe.
func (o *Recipe) RemoveRecipeidTags(ctx context.Context, exec boil.ContextExecutor, related ...*Tag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Recipeid, nil)
		if rel.R != nil {
			rel.R.RecipeidRecipe = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("recipeid")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RecipeidTags {
			if rel != ri {
				continue
			}

			ln := len(o.R.RecipeidTags)
			if ln > 1 && i < ln-1 {
				o.R.RecipeidTags[i] = o.R.RecipeidTags[ln-1]
			}
			o.R.RecipeidTags = o.R.RecipeidTags[:ln-1]
			break
		}
	}

	return nil
}

// Recipes retrieves all the records using an executor.
func Recipes(mods ...qm.QueryMod) recipeQuery {
	mods = append(mods, qm.From("\"recipes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"recipes\".*"})
	}

	return recipeQuery{q}
}

// FindRecipe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipe(ctx context.Context, exec boil.ContextExecutor, iD null.Int64, selectCols ...string) (*Recipe, error) {
	recipeObj := &Recipe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipes\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipes")
	}

	if err = recipeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return recipeObj, err
	}

	return recipeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recipe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeInsertCacheMut.RLock()
	cache, cached := recipeInsertCache[key]
	recipeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, recipeGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipes")
	}

	if !cached {
		recipeInsertCacheMut.Lock()
		recipeInsertCache[key] = cache
		recipeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recipe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recipe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeUpdateCacheMut.RLock()
	cache, cached := recipeUpdateCache[key]
	recipeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, recipeGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, recipePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, append(wl, recipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipes")
	}

	if !cached {
		recipeUpdateCacheMut.Lock()
		recipeUpdateCache[key] = cache
		recipeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recipePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipe")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recipe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeUpsertCacheMut.RLock()
	cache, cached := recipeUpsertCache[key]
	recipeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipePrimaryKeyColumns))
			copy(conflict, recipePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"recipes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipes")
	}

	if !cached {
		recipeUpsertCacheMut.Lock()
		recipeUpsertCache[key] = cache
		recipeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Recipe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recipe) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recipe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipePrimaryKeyMapping)
	sql := "DELETE FROM \"recipes\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"recipes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recipePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipes")
	}

	if len(recipeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recipe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipe(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipes\".* FROM \"recipes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, recipePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSlice")
	}

	*o = slice

	return nil
}

// RecipeExists checks if the Recipe row exists.
func RecipeExists(ctx context.Context, exec boil.ContextExecutor, iD null.Int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipes\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipes exists")
	}

	return exists, nil
}
